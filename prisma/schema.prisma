// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique @map("clerk_id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  clients  Client[]
  invoices Invoice[]

  @@map("users")
}

model Client {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  userClerkId String  @map("user_clerk_id")
  name      String
  email     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  @@unique([userId, email])
  // Indexes
  @@index([userId])
  @@map("clients")
}

model Invoice {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  clientId  String   @map("client_id")
  data      Json // Complete invoice JSON from frontend
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([clientId])
  @@index([userId, clientId])
  @@map("invoices")
}
